datasource db {
  provider = "mysql" // Указывает, что используется MySQL база данных.
  url      = env("DATABASE_URL") // Ссылка на строку подключения, которая берется из переменной окружения.
}

generator client {
  provider = "prisma-client-js" // Указывает на использование Prisma Client.
}

generator typegraphql {
  provider = "typegraphql-prisma" // Указывает на генератор TypeGraphQL для Prisma.
  output   = "generated" // Директория, куда сохраняются сгенерированные файлы.
}

model ProductCategory {
  id       Int       @id @default(autoincrement()) // Идентификатор категории, автогенерируемый.
  name     String // Название категории.
  desc     String? // Описание категории, необязательное поле.
  products Product[] // Связь с таблицей продуктов, принадлежащих этой категории.
}

model NutrientCategory {
  id        Int        @id @default(autoincrement()) // Идентификатор категории питательных веществ, автогенерируемый.
  name      String // Название категории питательных веществ.
  desc      String? // Описание категории, необязательное поле.
  nutrients Nutrient[] // Связь с таблицей Nutrient, описывающей питательные вещества этой категории.
}

model Product {
  id                  Int               @id @default(autoincrement())// Поле id является первичным ключом.
  name                String            @unique // Уникальное название // Название продукта.
  productNutrients    ProductNutrient[]     // Связь с таблицей ProductNutrient, описывающей питательные вещества.
  productMeasures     ProductMeasure[]          // Связь с таблицей ProductMeasure, описывающей измерения продукта.
  productTotalWeights ProductTotalWeight[]    // Связь с таблицей ProductTotalWeight, описывающей нетто-измерение.
  dishProducts        DishProduct[] // Связь с таблицей DishProduct, описывающей блюда, содержащие этот продукт.
  productCategory     ProductCategory   @relation(fields: [categoryId], references: [id]) // Ссылка на категорию через поле categoryId.
  categoryId          Int
}

model Nutrient {
  id         String  @id // Идентификатор питательного вещества.
  name       String // Название питательного вещества.
  productNutrients   ProductNutrient[] // Связь с таблицей ProductNutrient, описывающей продукты, содержащие это вещество.
  nutrientCategory   NutrientCategory  @relation(fields: [categoryId], references: [id]) // Связь с категорией питательных веществ.
  categoryId  Int
}


model ProductNutrient {
  id            Int      @id @default(autoincrement()) // Идентификатор записи, автогенерируемый.
  valueString   String? // Дополнительная строковая информация о веществе, необязательная.
  valueAmount   Float // Количество вещества, необязательное.
  valueExponent Int // Экспонента для количества вещества, необязательная.
  product       Product  @relation(fields: [productId], references: [id]) // Связь с продуктом.
  nutrient      Nutrient @relation(fields: [nutrientId], references: [id]) // Связь с питательным веществом.
  productId     Int // Идентификатор продукта, содержащего это вещество.
  nutrientId    String // Идентификатор питательного вещества.
  @@unique([productId, nutrientId])
}

// ссылается к одному конкретному продукту
model ProductTotalWeight {
  id        Int     @id @default(autoincrement()) // Идентификатор записи, автогенерируемый.
  value     Float // Значение измерения.
  desc      String? // Описание измерения, необязательное.
  product   Product @relation(fields: [productId], references: [id]) // Связь с продуктом.
  productId Int // Идентификатор продукта, к которому относится измерение.
}

model ProductMeasure {
  id        Int     @id @default(autoincrement()) // Идентификатор записи, автогенерируемый.
  name      String // Название измерения.
  value     Float // Значение измерения.
  desc      String? // Описание измерения, необязательное.
  product   Product @relation(fields: [productId], references: [id]) // Связь с продуктом.
  productId Int // Идентификатор продукта, к которому относится измерение.
}

model Dish {
  id                Int          @id @default(autoincrement()) // Идентификатор блюда, автогенерируемый.
  name              String       @unique // Уникальное название блюда.
  description       String? // Описание блюда, необязательное.
  dishProducts      DishProduct[] // Связь с таблицей DishProduct, описывающей продукты в этом блюде.
  MenuDishes        MenuDish[] // Связь с таблицей MenuDish, описывающей, в каких меню используется это блюдо.
}

model DishProduct {
  id          Int     @id @default(autoincrement()) // Идентификатор записи, автогенерируемый.
  dish        Dish    @relation(fields: [dishId], references: [id]) // Связь с блюдом.
  product     Product @relation(fields: [productId], references: [id]) // Связь с продуктом.
  quantity    Float
  cookCoeff   Float   @default(1) // Коэффициент изменения массы при приготовлении, по умолчанию 1.
  dishId      Int // Идентификатор блюда.
  productId   Int // Идентификатор продукта.
  @@unique([dishId, productId])
}

// Перечисление типов приемов пищи
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  SUPPER
  LATE_SUPPER
}

// Модель меню на день
model DailyMenu {
  id              Int       @id @default(autoincrement())
  date            DateTime  @default(now())
  mealType        MealType
  MenuDishes      MenuDish[] // Связь с блюдами в меню
}

// Модель связи между меню на день и блюдом с указанием количества
model MenuDish {
  id          Int       @id @default(autoincrement())
  dailyMenu   DailyMenu @relation(fields: [dailyMenuId], references: [id])
  dish        Dish      @relation(fields: [dishId], references: [id])
  quantity    Float
  dailyMenuId Int
  dishId      Int
  @@unique([dailyMenuId, dishId])
}
